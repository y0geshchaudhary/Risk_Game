package controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import domain.Continent;
import domain.Player;
import domain.Territory;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import service.GameService;

/**
 * GameController class have all the methods which handle different actions
 * which are performed by user while playing game.
 * 
 * @author Yogesh
 *
 */
public class GameController {

	static {
		continentSetObj = MapController.continentsSet;
		territorySetObj = MapController.territoriesSet;
	}

	@FXML
	GridPane gamePane;

	@FXML
	Label numberOfPlayers;

	@FXML
	TextField countOfPlayers;

	@FXML
	Button renderGame;

	@FXML
	Label playerName;

	@FXML
	Button startUpPhase;

	@FXML
	Button reinforcementPhase;

	@FXML
	Button attackPhase;

	@FXML
	Button fortificationPhase;

	@FXML
	ListView<Territory> playerTerritories;
	
	@FXML
	TextField numberOfArmiesPerTerritory;
	
	@FXML
	Button endTurn;
	
	@FXML
	Button endPhase;
	
	
	private static Map<String, TextField> idTotextFieldMapping = new HashMap<>();
	private static Set<Continent> continentSetObj;
	private static Set<Territory> territorySetObj;
	private static final String CONTROL_VALUE_WITH_SEMICOLON = "Control Value :";
	public static final String CONTROL_VALUE = "Control Value";
	public static final String TEXTFIELD_BORDER_COLOUR = "-fx-text-box-border: red;";
	private GameService serviceObject = new GameService();
	private int maxNumberOfTerritories	=	0;
	public static List<Player> playerList	=	new ArrayList<>();
	private static int playerCounter	=	0;
	

	/**
	 * This method handles {@link GameController#renderGame} event. It loads the
	 * chosen map and helps in forming playable UI dynamically.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */

	@FXML
	public void startGameHandler(ActionEvent event) {
		playerList	= new ArrayList<>(Integer.parseInt(countOfPlayers.getText()));
		int numberOfPlayers	=	Integer.parseInt(countOfPlayers.getText());
		for (int i = 0; i < numberOfPlayers; i++) {
			Player playerObj = new Player();
			playerObj.setName("Player " + i + 1);
			playerObj.setTerritories(new ArrayList<Territory>());
			playerList.add(playerObj);
		}
		serviceObject.distributeTerritories(playerList);
		formMap();
		createPlayButtonsAndLabels();
		
		
	}

	/**
	 * This function is used to generate TextBoxes and Labels denoting Territories
	 * and Continents of the game respectively. This is also adding the Mouse Click
	 * event on the text fields to show their NeighbouringTerritories by clicking
	 * the TextField twice and highlighting it's Neighbour's border by red.
	 * 
	 * @param gamePane
	 *            : This is the pane which will be seen on the stage and this
	 *            function is adding different nodes to this pane
	 */
	private void formMap() {

		Iterator<Continent> ite = continentSetObj.iterator();
		int colCounter = 0;
		while (ite.hasNext()) {
			Continent obj = ite.next();
			String nameofTheContinent = obj.getName();
			List<Territory> territoryList = obj.getTerritories();
			if(maxNumberOfTerritories<territoryList.size()) {
				maxNumberOfTerritories	=	territoryList.size();
			}
			Integer controlValue = obj.getContinentArmyValue();
			Label continentName = new Label(nameofTheContinent);
			Label controlValueLabel = new Label(GameController.CONTROL_VALUE_WITH_SEMICOLON + controlValue.toString());
			gamePane.setConstraints(continentName, colCounter, 1);
			gamePane.setConstraints(controlValueLabel, colCounter, 2);
			gamePane.getChildren().addAll(continentName, controlValueLabel);
			for (int i = 0; i < territoryList.size(); i++) {
				Territory territoryObj = territoryList.get(i);
				TextField territoryField = new TextField();
				gamePane.setConstraints(territoryField, colCounter, i + 3);
				territoryField.setPromptText(territoryObj.getName());
				territoryField.setOnMouseClicked(new EventHandler<MouseEvent>() {

					@Override
					public void handle(MouseEvent event) {
						if (event.getClickCount() == 2)
							highlightNeighbouringTerritoriesHelper(territoryObj.getNeighbourTerritories(),
									event.getClickCount());
						highlightNeighbouringTerritoriesHelper(territoryObj.getNeighbourTerritories(),
								event.getClickCount());
					}
				});

				idTotextFieldMapping.put(territoryObj.getName(), territoryField);
				gamePane.getChildren().add(territoryField);
			}
			colCounter++;
		}

	}

	/**
	 * This function is being used to help in highlighting the Neighbouring
	 * territories depending on the number of clicks on the TextBox. If the TextBox
	 * is clicked twice it highlight the neighbouring territories' border by red and
	 * convert it back to the original colour if clicked otherwise
	 * 
	 * @param neighbouringCountries
	 *            : This list gives the neighbouring territories of a territory
	 * @param clickCount
	 *            : This gives the count of the clicks on the textfield.
	 */
	private void highlightNeighbouringTerritoriesHelper(List<Territory> neighbouringCountries, int clickCount) {

		for (int i = 0; i < neighbouringCountries.size(); i++) {
			Territory t = neighbouringCountries.get(i);
			TextField tf = idTotextFieldMapping.get(t.getName());
			if (clickCount == 2) {
				tf.setStyle(GameController.TEXTFIELD_BORDER_COLOUR);
			} else {
				tf.setStyle("");
			}
		}

	}

	private void createPlayButtonsAndLabels() {

		int colNumber = continentSetObj.size();
		playerName	=	new Label(playerList.get(0).getName());
		startUpPhase	=	new Button("StartUp Phase");
		startUpPhase.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent event) {
				// TODO Auto-generated method stub
				startUpPhaseAction(event);
				
			}
		});
		reinforcementPhase	=	new Button("Reinforcement Phase");
		attackPhase	=	new Button("Atatck Phase");
		fortificationPhase	=	new Button("Fortification Phase");
		
		gamePane.setConstraints(playerName, colNumber, 3);
		gamePane.setConstraints(startUpPhase, colNumber, 4);
		gamePane.setConstraints(reinforcementPhase, colNumber, 5);
		gamePane.setConstraints(attackPhase, colNumber, 6);
		gamePane.setConstraints(fortificationPhase, colNumber, 7);

		reinforcementPhase.setVisible(false);
		attackPhase.setVisible(false);
		fortificationPhase.setVisible(false);

		gamePane.getChildren().addAll(playerName, startUpPhase, reinforcementPhase, attackPhase, fortificationPhase);

	}

	private void createStartUpPhase(Player playerInFocus) {
		int rowIndex	=	maxNumberOfTerritories;
		playerTerritories	=	new ListView<>();
		numberOfArmiesPerTerritory	=	new TextField();
		endTurn	=	new Button("End Turn");
		
		playerTerritories.getItems().addAll(playerInFocus.getTerritories());
		numberOfArmiesPerTerritory.setPromptText("Enter Army Value");
		
		gamePane.setConstraints(playerTerritories, 0, rowIndex);
		gamePane.setConstraints(numberOfArmiesPerTerritory, 1, rowIndex);
		gamePane.setConstraints(endTurn, 2, rowIndex);
		endTurn.setOnAction(new EventHandler<ActionEvent>() {

			@Override
			public void handle(ActionEvent e) {
				// TODO Auto-generated method stub
				endTurnForStartUpPhase(e);
			}
		});
		
		gamePane.getChildren().addAll(playerTerritories,numberOfArmiesPerTerritory,endTurn);
		startUpPhase.setVisible(false);
	}
	
	private void startUpPhaseAction(ActionEvent e) {
		
		Player playerInFocus	=	playerList.get(playerCounter);
		createStartUpPhase(playerInFocus);
	}
	
	private void endTurnForStartUpPhase(ActionEvent e){
		//TODO
//		boolean answer=validatePlayerArmyNumber(playerInFocus);
		if (playerCounter < playerList.size())
			playerCounter++;
		else
			playerCounter = 0;
		startUpPhase.setVisible(true);
	}
}
