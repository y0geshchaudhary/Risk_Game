package controller;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import javafx.stage.FileChooser;

/**
 * RiskController class have all the methods which handle different actions
 * which are performed by user on application UI.
 * 
 * @author Yogesh
 *
 */
public class RiskController {

	@FXML
	private TextField contsNo;

	@FXML
	private TextField terrsNo;

	@FXML
	private Button generateMap;

	@FXML
	private TextField mapPathMaps;

	@FXML
	private Button chooseMaps;

	@FXML
	private Button modifyMap;

	@FXML
	private Label errorLabelMaps;

	@FXML
	private TextField mapPathGame;

	@FXML
	private Button chooseGame;

	@FXML
	private Label errorLabelGame;

	@FXML
	private AnchorPane lowerAP;

	@FXML
	private ComboBox<String> contsCB;

	@FXML
	private ListView<String> allTerritoriesCTMapping;

	@FXML
	private ListView<String> mappedTerritoriesCTMapping;

	@FXML
	private Button removeTerrsToContsButton;

	@FXML
	private Button addTerrsToContsButton;

	@FXML
	private ComboBox<String> terrsCB;

	@FXML
	private ListView<String> allTerritoriesTTMapping;

	@FXML
	private ListView<String> mappedTerritoriesTTMapping;

	@FXML
	private Button addTerrsToTerrsButton;

	@FXML
	private Button removeTerrsToTerrsButton;

	@FXML
	private Button showMapButton;

	@FXML
	private Button saveMapButton;

	private HashMap<String, List<String>> continentTerritoriesMapping = new HashMap<>();
	private HashMap<String, List<String>> neighbourTerritoriesMapping = new HashMap<>();
	private ArrayList<String> continentsList = new ArrayList<>();
	private ArrayList<String> territoriesList = new ArrayList<>();

	/**
	 * This method handle {@link RiskController#generateMap} button event. This
	 * generate number of territories and continents as mentioned by user and
	 * populate required feilds on UI.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void generateMapHandler(ActionEvent event) {
		// cleanUp();
		/*
		 * continentTerritoriesMapping = new HashMap<>(); neighbourTerritoriesMapping =
		 * new HashMap<>(); continentsList = new ArrayList<>(); territoriesList = new
		 * ArrayList<>();
		 */
		int continents, territories;
		try {
			continents = Integer.parseInt(contsNo.getText());
			territories = Integer.parseInt(terrsNo.getText());
			if (continents == 0 || territories == 0)
				throw new Exception();
		} catch (Exception e) {
			errorLabelMaps.setText("Invalid continents/territories.");
			return;
		}
		errorLabelMaps.setText("");
		String tempContinent;
		for (int i = 1; i <= continents; i++) {
			tempContinent = "Continent " + i;
			continentsList.add(tempContinent);
			continentTerritoriesMapping.put(tempContinent, new ArrayList<>());
		}
		String tempTerritory;
		for (int i = 1; i <= territories; i++) {
			tempTerritory = "Territory " + i;
			territoriesList.add(tempTerritory);
			neighbourTerritoriesMapping.put(tempTerritory, new ArrayList<>());
		}

		contsCB.setItems(FXCollections.observableList(continentsList));
		contsCB.setValue(continentsList.get(0));
		allTerritoriesCTMapping.setItems(FXCollections.observableList(territoriesList));
		mappedTerritoriesCTMapping
				.setItems(FXCollections.observableList(continentTerritoriesMapping.get(continentsList.get(0))));

		terrsCB.setItems(FXCollections.observableList(territoriesList));
		terrsCB.setValue(territoriesList.get(0));
		allTerritoriesTTMapping.setItems(FXCollections.observableList(territoriesList));
		mappedTerritoriesTTMapping
				.setItems(FXCollections.observableList(neighbourTerritoriesMapping.get(territoriesList.get(0))));
	}

	/**
	 * This method handle {@link RiskController#chooseMaps} button event and open a
	 * dialog box to choose a map file to modify.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void chooseMapToModify(ActionEvent event) {
		// cleanUp();
		FileChooser chooser = new FileChooser();
		File file = chooser.showOpenDialog(null);
		mapPathMaps.setText(file == null ? "" : file.getAbsolutePath());
	}

	/**
	 * This method handle {@link RiskController#chooseGame} button event and open a
	 * dialog box to choose a map file to play game.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void chooseMapToPlayGame(ActionEvent event) {
		// cleanUp();
		FileChooser chooser = new FileChooser();
		File file = chooser.showOpenDialog(null);
		mapPathGame.setText(file == null ? "" : file.getAbsolutePath());
	}

	/**
	 * This method handle {@link RiskController#contsCB} ComboBox value change event
	 * to update related territories on UI.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void updateTerritoriesPerContinent(ActionEvent event) {
		String selectedContinent = contsCB.getValue();
		mappedTerritoriesCTMapping
				.setItems(FXCollections.observableList(continentTerritoriesMapping.get(selectedContinent)));
	}

	/**
	 * This method handle {@link RiskController#addTerrsToContsButton} button event
	 * to add selected Territory to selected Continent.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void addTerritoriesToContinent(ActionEvent event) {
		String selectedTerritory = allTerritoriesCTMapping.getSelectionModel().getSelectedItem();
		String selectedContinent = contsCB.getValue();
		if (!continentTerritoriesMapping.get(selectedContinent).contains(selectedTerritory)) {
			continentTerritoriesMapping.get(selectedContinent).add(selectedTerritory);
		}
		mappedTerritoriesCTMapping
				.setItems(FXCollections.observableList(continentTerritoriesMapping.get(selectedContinent)));
	}

	/**
	 * This method handle {@link RiskController#removeTerrsToContsButton} button
	 * event to remove selected Territory from selected Continent.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void removeTerritoriesToContinent(ActionEvent event) {
		String selectedTerritory = mappedTerritoriesCTMapping.getSelectionModel().getSelectedItem();
		String selectedContinent = contsCB.getValue();
		continentTerritoriesMapping.get(selectedContinent).remove(selectedTerritory);
		mappedTerritoriesCTMapping
				.setItems(FXCollections.observableList(continentTerritoriesMapping.get(selectedContinent)));
	}

	/**
	 * This method handle {@link RiskController#terrsCB} ComboBox value change event
	 * to update related territories on UI.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void updateTerritoriesPerTerritory(ActionEvent event) {
		String selectedTerritory = terrsCB.getValue();
		mappedTerritoriesTTMapping
				.setItems(FXCollections.observableList(neighbourTerritoriesMapping.get(selectedTerritory)));
	}

	/**
	 * This method handle {@link RiskController#addTerrsToTerrsButton} button event
	 * to add selected Territory to another selected territory in terrsCB as it's
	 * neighbor.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void addTerritoriesToTerritory(ActionEvent event) {
		String neighbourTerritory = allTerritoriesTTMapping.getSelectionModel().getSelectedItem();
		String selectedTerritory = terrsCB.getValue();
		if (!neighbourTerritoriesMapping.get(selectedTerritory).contains(neighbourTerritory)) {
			neighbourTerritoriesMapping.get(selectedTerritory).add(neighbourTerritory);
		}
		mappedTerritoriesTTMapping
				.setItems(FXCollections.observableList(neighbourTerritoriesMapping.get(selectedTerritory)));
	}

	/**
	 * This method handle {@link RiskController#removeTerrsToTerrsButton} button
	 * event to remove selected Territory from selected territory in terrsCB
	 * mapping.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void removeTerritoriesToTerritory(ActionEvent event) {
		String neighbourTerritory = mappedTerritoriesTTMapping.getSelectionModel().getSelectedItem();
		String selectedTerritory = terrsCB.getValue();
		neighbourTerritoriesMapping.get(selectedTerritory).remove(neighbourTerritory);
		mappedTerritoriesTTMapping
				.setItems(FXCollections.observableList(neighbourTerritoriesMapping.get(selectedTerritory)));
	}

	/**
	 * This method is used to cleanup unrequited data from various labels and list
	 * views.
	 */
	private void cleanUp() {
		mappedTerritoriesTTMapping.setItems(null);
		allTerritoriesTTMapping.setItems(null);
		mappedTerritoriesCTMapping.setItems(null);
		allTerritoriesCTMapping.setItems(null);
		terrsCB.setValue("");
		contsCB.setItems(null);
		errorLabelGame.setText("");
		mapPathGame.setText("");
		errorLabelMaps.setText("");
		mapPathMaps.setText("");
		terrsNo.setText("");
		contsNo.setText("");
	}
}
