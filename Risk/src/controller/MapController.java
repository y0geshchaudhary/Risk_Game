package controller;

import java.io.File;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import domain.Continent;
import domain.Territory;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextField;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import service.MapService;

/**
 * RiskController class have all the methods which handle different actions
 * which are performed by user on application UI.
 * 
 * @author Yogesh
 *
 */
public class MapController {

	@FXML
	private TextField contsNo;

	@FXML
	private TextField terrsNo;

	@FXML
	private Button generateMap;

	@FXML
	private TextField mapPathMaps;

	@FXML
	private Button chooseMaps;

	@FXML
	private Button modifyMap;

	@FXML
	private Label errorLabelMaps;

	@FXML
	private TextField mapPathGame;

	@FXML
	private Button chooseGame;

	@FXML
	private Label errorLabelGame;

	@FXML
	private AnchorPane lowerAP;

	@FXML
	private ComboBox<Continent> contsCB;

	@FXML
	private ListView<Territory> allTerritoriesCTMapping;

	@FXML
	private ListView<Territory> mappedTerritoriesCTMapping;

	@FXML
	private Button removeTerrsToContsButton;

	@FXML
	private Button addTerrsToContsButton;

	@FXML
	private ComboBox<Territory> terrsCB;

	@FXML
	private ListView<Territory> allTerritoriesTTMapping;

	@FXML
	private ListView<Territory> mappedTerritoriesTTMapping;

	@FXML
	private Button addTerrsToTerrsButton;

	@FXML
	private Button removeTerrsToTerrsButton;

	@FXML
	private Button showMapButton;

	@FXML
	private Button saveMapButton;

	@FXML
	private TextField contiControlValue;

	@FXML
	private Button updateContiControlValueButton;

	@FXML
	private Label errorLabelCCV;

	@FXML
	private Label errorLabelMapping;

	@FXML
	private Label errorLabelTTM;

	/*
	 * private HashMap<Continent, List<Territory>> continentTerritoriesMapping = new
	 * HashMap<>(); private HashMap<Territory, List<Territory>>
	 * neighbourTerritoriesMapping = new HashMap<>(); private ArrayList<Continent>
	 * continentsList = new ArrayList<>(); private ArrayList<Territory>
	 * territoriesList = new ArrayList<>();
	 */
	private HashSet<Continent> continentsSet = new HashSet();
	private HashSet<Territory> territoriesSet = new HashSet();
	private MapService mapService = new MapService();

	/**
	 * This method handle {@link MapController#generateMap} button event. This
	 * generate number of territories and continents as mentioned by user and
	 * populate required fields on UI.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void generateMapHandler(ActionEvent event) {
		List<Continent> continentsList = new ArrayList<>();
		List<Territory> territoriesList = new ArrayList<>();

		int continents, territories;
		try {
			continents = Integer.parseInt(contsNo.getText());
			territories = Integer.parseInt(terrsNo.getText());
			if (continents == 0 || territories == 0)
				throw new Exception();
		} catch (Exception e) {
			errorLabelMaps.setText("Invalid continents/territories.");
			return;
		}

		errorLabelMaps.setText("");
		Continent tempContinent;
		for (int i = 1; i <= continents; i++) {
			tempContinent = new Continent("Continent " + i);
			continentsSet.add(tempContinent);
			continentsList.add(tempContinent);
		}

		Territory tempTerritory;
		for (int i = 1; i <= territories; i++) {
			tempTerritory = new Territory("Territory " + i);
			territoriesSet.add(tempTerritory);
			territoriesList.add(tempTerritory);
		}

		contsCB.setItems(FXCollections.observableList(continentsList));
		contsCB.setValue(continentsList.get(0));
		contiControlValue.setText(String.valueOf(continentsList.get(0).getContinentArmyValue()));
		allTerritoriesCTMapping.setItems(FXCollections.observableList(territoriesList));
		mappedTerritoriesCTMapping.setItems(FXCollections.observableList(continentsList.get(0).getTerritories()));

		terrsCB.setItems(FXCollections.observableList(territoriesList));
		terrsCB.setValue(territoriesList.get(0));
		allTerritoriesTTMapping.setItems(FXCollections.observableList(territoriesList));
		mappedTerritoriesTTMapping
				.setItems(FXCollections.observableList(territoriesList.get(0).getNeighbourTerritories()));
	}

	/**
	 * This method handle {@link MapController#chooseMaps} button event and open a
	 * dialog box to choose a map file to modify.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void chooseMapToModify(ActionEvent event) {
		// cleanUp();
		FileChooser chooser = new FileChooser();
		chooser.getExtensionFilters().add(new ExtensionFilter(".map file", "*.map"));
		File file = chooser.showOpenDialog(null);
		mapPathMaps.setText(file == null ? "" : file.getAbsolutePath());
	}

	/**
	 * This method handle {@link MapController#chooseGame} button event and open a
	 * dialog box to choose a map file to play game.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void chooseMapToPlayGame(ActionEvent event) {
		FileChooser chooser = new FileChooser();
		chooser.getExtensionFilters().add(new ExtensionFilter(".map file", "*.map"));
		File file = chooser.showOpenDialog(null);
		mapPathGame.setText(file == null ? "" : file.getAbsolutePath());
	}

	/**
	 * This method handle {@link MapController#contsCB} ComboBox value change event
	 * to update related territories on UI.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void updateTerritoriesPerContinent(ActionEvent event) {
		Continent selectedContinent = contsCB.getValue();
		mappedTerritoriesCTMapping.setItems(FXCollections.observableList(selectedContinent.getTerritories()));
		contiControlValue.setText(String.valueOf(selectedContinent.getContinentArmyValue()));
	}

	/**
	 * This method handle {@link MapController#addTerrsToContsButton} button event
	 * to add selected Territory to selected Continent.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void addTerritoriesToContinent(ActionEvent event) {
		Territory selectedTerritory = allTerritoriesCTMapping.getSelectionModel().getSelectedItem();
		Continent selectedContinent = contsCB.getValue();
		errorLabelCCV.setText("");

		if (selectedTerritory != null && !selectedContinent.getTerritories().contains(selectedTerritory)
				&& selectedTerritory.getContinent() == null) {
			selectedContinent.getTerritories().add(selectedTerritory);
			selectedTerritory.setContinent(selectedContinent);
		} else
			errorLabelCCV.setText("Invalid territory selected.");

		mappedTerritoriesCTMapping.setItems(FXCollections.observableList(selectedContinent.getTerritories()));
	}

	/**
	 * This method handle {@link MapController#removeTerrsToContsButton} button
	 * event to remove selected Territory from selected Continent.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void removeTerritoriesToContinent(ActionEvent event) {
		Territory selectedTerritory = mappedTerritoriesCTMapping.getSelectionModel().getSelectedItem();
		Continent selectedContinent = contsCB.getValue();
		errorLabelCCV.setText("");
		if (selectedTerritory != null) {
			selectedContinent.getTerritories().remove(selectedTerritory);
			selectedTerritory.setContinent(null);
		} else
			errorLabelCCV.setText("Invalid territory selected.");

		mappedTerritoriesCTMapping.setItems(FXCollections.observableList(selectedContinent.getTerritories()));
	}

	/**
	 * This method handle {@link MapController#terrsCB} ComboBox value change event
	 * to update related territories on UI.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void updateTerritoriesPerTerritory(ActionEvent event) {
		Territory selectedTerritory = terrsCB.getValue();
		mappedTerritoriesTTMapping.setItems(FXCollections.observableList(selectedTerritory.getNeighbourTerritories()));
	}

	/**
	 * This method handle {@link MapController#addTerrsToTerrsButton} button event
	 * to add selected Territory to another selected territory in terrsCB as it's
	 * neighbor.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void addTerritoriesToTerritory(ActionEvent event) {
		Territory neighbourTerritory = allTerritoriesTTMapping.getSelectionModel().getSelectedItem();
		Territory selectedTerritory = terrsCB.getValue();
		errorLabelTTM.setText("");

		if (neighbourTerritory != null && !selectedTerritory.getNeighbourTerritories().contains(neighbourTerritory)
				&& !selectedTerritory.equals(neighbourTerritory)) {
			selectedTerritory.getNeighbourTerritories().add(neighbourTerritory);
			if (!neighbourTerritory.getNeighbourTerritories().contains(selectedTerritory)) {
				neighbourTerritory.getNeighbourTerritories().add(selectedTerritory);
			}
		} else
			errorLabelTTM.setText("Invalid territory selected.");
		mappedTerritoriesTTMapping.setItems(FXCollections.observableList(selectedTerritory.getNeighbourTerritories()));
	}

	/**
	 * This method handle {@link MapController#removeTerrsToTerrsButton} button
	 * event to remove selected Territory from selected territory in terrsCB
	 * mapping.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void removeTerritoriesToTerritory(ActionEvent event) {
		Territory neighbourTerritory = mappedTerritoriesTTMapping.getSelectionModel().getSelectedItem();
		Territory selectedTerritory = terrsCB.getValue();
		errorLabelTTM.setText("");
		if (neighbourTerritory != null) {
			selectedTerritory.getNeighbourTerritories().remove(neighbourTerritory);
			neighbourTerritory.getNeighbourTerritories().remove(selectedTerritory);
		} else
			errorLabelTTM.setText("Invalid territory selected.");
		mappedTerritoriesTTMapping.setItems(FXCollections.observableList(selectedTerritory.getNeighbourTerritories()));
	}

	/**
	 * This method handle {@link MapController#updateContiControlValueButton} button
	 * event to update selected continent army value in Continent object in
	 * {@link MapController#continentTerritoriesMapping} mapping.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void updateContiControlValue(ActionEvent event) {
		errorLabelCCV.setText("");
		Continent selectedContinent = contsCB.getValue();
		String contiArmyValue = contiControlValue.getText();
		try {
			if (contiArmyValue != null && Integer.parseInt(contiArmyValue) > 0) {
				selectedContinent.setContinentArmyValue(Integer.parseInt(contiArmyValue));
			}
			if (Integer.parseInt(contiArmyValue) <= 0) {
				errorLabelCCV.setText("Enter positive number.");
			}
		} catch (Exception e) {
			errorLabelCCV.setText("Enter valid value.");
		}

	}

	/**
	 * This method handle {@link MapController#saveMapButton} button event. It
	 * validates the mapping and save it to a text file.
	 * 
	 * @param event:
	 *            ActionEvent instance which is generated by user.
	 */
	@FXML
	public void saveMap(ActionEvent event) {

		// select path to save file.
		FileChooser fileChooser = new FileChooser();
		fileChooser.getExtensionFilters().add(new ExtensionFilter(".map file", "*.map"));
		File file = fileChooser.showSaveDialog(null);

		if (file != null) {
			List<String> errorList = new ArrayList();
			// validate the map.
			mapService.validateMap(continentsSet, territoriesSet, errorList);

			// check for validation errors and proceed or notify user accordingly.
			if (errorList.size() == 0) {
				// if file is saved, inform user or show error.
				if (mapService.saveMap(file, continentsSet, territoriesSet)) {
					errorLabelMapping.setText("Map saved.");
					errorLabelMapping.setTextFill(Color.BLACK);
				} else
					errorLabelMapping.setText("Issue saving map. Try again.");

			} else
				errorLabelMapping.setText(errorList.get(0));
		}
	}

	/**
	 * This method is used to cleanup unrequited data from various labels and list
	 * views.
	 */
	private void cleanUp() {
		mappedTerritoriesTTMapping.setItems(null);
		allTerritoriesTTMapping.setItems(null);
		mappedTerritoriesCTMapping.setItems(null);
		allTerritoriesCTMapping.setItems(null);
		terrsCB.setValue(null);
		contsCB.setItems(null);
		errorLabelGame.setText("");
		mapPathGame.setText("");
		errorLabelMaps.setText("");
		mapPathMaps.setText("");
		terrsNo.setText("");
		contsNo.setText("");
	}
}
